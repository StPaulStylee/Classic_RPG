//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/InputActions/CharacterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Game.InputActions
{
    public partial class @CharacterControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @CharacterControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControls"",
    ""maps"": [
        {
            ""name"": ""CharacterController"",
            ""id"": ""58f4d02e-83ab-4b17-9e19-d9ab59660d3e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""67f70b87-89f0-4e21-ba74-5f63398d8c36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CursorPosition"",
                    ""type"": ""Value"",
                    ""id"": ""63ab20a1-f7cd-43c7-9f36-a354fa940240"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9f0250b1-918e-4e59-b570-112f2e70b464"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07b4f464-6a3c-4d55-bf29-3fade23fc0ef"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CursorPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
            // CharacterController
            m_CharacterController = asset.FindActionMap("CharacterController", throwIfNotFound: true);
            m_CharacterController_Move = m_CharacterController.FindAction("Move", throwIfNotFound: true);
            m_CharacterController_CursorPosition = m_CharacterController.FindAction("CursorPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterController
        private readonly InputActionMap m_CharacterController;
        private ICharacterControllerActions m_CharacterControllerActionsCallbackInterface;
        private readonly InputAction m_CharacterController_Move;
        private readonly InputAction m_CharacterController_CursorPosition;
        public struct CharacterControllerActions
        {
            private @CharacterControls m_Wrapper;
            public CharacterControllerActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_CharacterController_Move;
            public InputAction @CursorPosition => m_Wrapper.m_CharacterController_CursorPosition;
            public InputActionMap Get() { return m_Wrapper.m_CharacterController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControllerActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterControllerActions instance)
            {
                if (m_Wrapper.m_CharacterControllerActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnMove;
                    @CursorPosition.started -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnCursorPosition;
                    @CursorPosition.performed -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnCursorPosition;
                    @CursorPosition.canceled -= m_Wrapper.m_CharacterControllerActionsCallbackInterface.OnCursorPosition;
                }
                m_Wrapper.m_CharacterControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @CursorPosition.started += instance.OnCursorPosition;
                    @CursorPosition.performed += instance.OnCursorPosition;
                    @CursorPosition.canceled += instance.OnCursorPosition;
                }
            }
        }
        public CharacterControllerActions @CharacterController => new CharacterControllerActions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        public interface ICharacterControllerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnCursorPosition(InputAction.CallbackContext context);
        }
    }
}
